How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It reduced the number of lines you had to look at by only showing you those that changed

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you make a mistake, it allows you to easily go back to a working version of the file

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing when to commit allows you to group related changes together in a single commit. Automatically saved versions are likely to be disjunct and potentially incomplete (i.e. not compile)

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It depends on the nature of the content. Git is generally for source code, so you have many files that are related. With Google Docs, typically one document is self-dependent, or self-contained.

How can you use the commands git log and git diff to view the history of files?

    `git log` can be used to see a list of all commits with a brief description of the changes contained in that commit; `git diff` can be used to see each explicit change that happened across two commits.

How might using version control make you more confident to make changes that
could break something?

    You won't be as tentative knowing that you can easily revert to a known working version.

Now that you have your workspace set up, what do you want to try using Git for?

    My daily work!


Git commands learned in lesson 1:
git diff - compare files/commits
git clone - make a copy of an entire Git repo
git checkout - view files from a specific commit
git log - show commits made in the repo
